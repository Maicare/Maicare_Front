name: Deploy Frontend to VPS

on:
  push:
    branches: [ dev ]

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/maicare
  VPS_APP_DIR: /opt/maicare  # Directory on your VPS where app will run

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: maicare-prod   # Set this up in GitHub repo settings

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            NEXT_PUBLIC_AUTH_ENABLED=${{ secrets.NEXT_PUBLIC_AUTH_ENABLED }}
            NEXT_PUBLIC_BACKEND_URL=https://dev-api.maicare.online
          tags: |
            ${{ env.DOCKER_IMAGE }}:front-dev
            ${{ env.DOCKER_IMAGE }}:front-dev-${{ github.sha }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            #!/bin/bash
            set -e
            
            echo "=== Starting Frontend Deployment ==="
            
            # Create app directory if it doesn't exist
            sudo mkdir -p /opt/maicare
            sudo chown -R ${{ secrets.VPS_USERNAME }}:${{ secrets.VPS_USERNAME }} /opt/maicare
            
            # Login to Docker Hub
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            
            # Stop and remove existing frontend container if running
            if [ "$(docker ps -aq -f name=maicare-frontend-dev)" ]; then
              echo "Stopping and removing existing frontend container..."
              docker stop maicare-frontend-dev
              docker rm maicare-frontend-dev
            fi
            
            # Pull the new image
            echo "Pulling new frontend image..."
            docker pull ${{ env.DOCKER_IMAGE }}:front-dev
            
            # Create frontend environment file
            echo "Creating frontend environment file..."
            cat <<EOF > /opt/maicare/front-dev.env
            NEXT_PUBLIC_AUTH_ENABLED=${{ secrets.NEXT_PUBLIC_AUTH_ENABLED }}
            NEXT_PUBLIC_BACKEND_URL=https://dev-api.maicare.online
            NODE_ENV=production
            EOF
            
            # Set proper permissions for env file
            chmod 644 /opt/maicare/front-dev.env
            
            # Verify the file was created and check permissions
            echo "Verifying frontend environment file..."
            ls -la /opt/maicare/front-dev.env
            echo "Current user: $(whoami)"
            echo "Docker version: $(docker --version)"
            echo "Testing file access:"
            cat /opt/maicare/front-dev.env

            # Create maicare network if it doesn't exist
            if ! docker network ls | grep -q maicare-network; then
              echo "Creating Docker network..."
              docker network create maicare-network
            fi
            
            # Run the new frontend container
            echo "Starting new frontend container..."
            echo "Using env file: /opt/maicare/front-dev.env"
            docker run -d \
            --name maicare-frontend-dev \
            --network maicare-network \
            -p 4000:3000 \
            --restart unless-stopped \
            --env-file /opt/maicare/front-dev.env \
            ${{ env.DOCKER_IMAGE }}:front-dev
            
            echo "=== Frontend Deployment Complete ==="
            
            # Clean up unused images
            echo "Cleaning up..."
            docker image prune -af
            
            # Show running containers
            echo "Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"